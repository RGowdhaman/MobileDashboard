<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		creationComplete="creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.charts.HitData;
			import mx.charts.events.ChartItemEvent;
			import mx.charts.series.ColumnSeries;
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			[Bindable]
			protected var columnSeries:Array = [];

			[Bindable] protected var results:ArrayCollection = new ArrayCollection( [
				{ region: "North America", total: 2400,                            
					results: [	{quarter: "Q1", Alpha: 100, Beta: 200, Gamma: 300}, 
						{quarter: "Q2", Alpha: 240, Beta: 120, Gamma: 400},
						{quarter: "Q3", Alpha: 80, Beta: 220, Gamma: 350},
						{quarter: "Q4", Alpha: 280, Beta: 160, Gamma: 190} ] },
				{ region: "Latin America", total: 1000,                            
					results: [	{quarter: "Q1", Alpha: 120, Beta: 210, Gamma: 80}, 
						{quarter: "Q2", Alpha: 140, Beta: 180, Gamma: 70},
						{quarter: "Q3", Alpha: 70, Beta: 90, Gamma: 220},
						{quarter: "Q4", Alpha: 180, Beta: 100, Gamma: 80} ] },
				{ region: "APAC", total: 1200,                            
					results: [	{quarter: "Q1", Alpha: 70, Beta: 110, Gamma: 180}, 
						{quarter: "Q2", Alpha: 40, Beta: 80, Gamma: 120},
						{quarter: "Q3", Alpha: 90, Beta: 90, Gamma: 220},
						{quarter: "Q4", Alpha: 120, Beta: 150, Gamma: 220} ] },
				{ region: "Japan", total: 800,                            
					results: [	{quarter: "Q1", Alpha: 20, Beta: 60, Gamma: 50}, 
						{quarter: "Q2", Alpha: 30, Beta: 70, Gamma: 200},
						{quarter: "Q3", Alpha: 50, Beta: 50, Gamma: 130},
						{quarter: "Q4", Alpha: 70, Beta: 40, Gamma: 100} ] },
				{ region: "Europe", total: 2000,                            
					results: [	{quarter: "Q1", Alpha: 70, Beta: 100, Gamma: 280}, 
						{quarter: "Q2", Alpha: 230, Beta: 270, Gamma: 110},
						{quarter: "Q3", Alpha: 190, Beta: 150, Gamma: 140},
						{quarter: "Q4", Alpha: 300, Beta: 220, Gamma: 90} ] }
			]);
			
			
			protected function dataTipPie(hitData:HitData):String
			{
				var region:String = hitData.item.region;
				var total:Number = hitData.item.total;
				return "<p align='center'><b>" + region + "</b><br>$" + nf.format(total)+"</p>";
			}
			
			protected function dataTipColumn(hitData:HitData):String
			{
				var region:String = hitData.item.region;
				var total:Number = hitData.item.total;
				return "<p align='center'><b>" + Object(hitData.element).yField + "</b><br>" + Object(hitData.chartItem).xValue + "<br>$" + nf.format(Object(hitData.chartItem).yValue)+"</p>";
			}
			
			protected function getSliceLabel(item:Object, arg2:String, arg3:Number, arg4:Number):String
			{
				return item==null?"":item.region;
			}
			
			protected function pcRegion_itemClickHandler(event:ChartItemEvent):void
			{
				var arr:Array = [];
				arr[event.hitData.chartItem.index] = 0.2;
				pieSeries.perWedgeExplodeRadius = arr;
				breakdown.dataProvider = event.hitData.chartItem.item.results;
				title2.text = "Product Breakdown - " + event.hitData.chartItem.item.region 

			}
			
			protected function stackGroup_changeHandler(event:Event):void
			{
				breakdown.type=event.target.selectedValue;
				switch(event.target.selectedValue)
				{
					case "clustered":
					{
						vAxis.maximum = 400;		
						break;
					}
					case "stacked":
					{
						vAxis.maximum = 800;		
						break;
					}
					case "100%":
					{
						vAxis.maximum = 100;		
						break;
					}
				}
				
			}
						
			protected function cb_changeHandler(event:Event):void
			{
				if (event.target.selected)
					createSeries(event.target.label);				
				else
					removeSeries(event.target.label);
				breakdown.series = columnSeries;
			}
			
			protected function createSeries(yField:String):void
			{
				var cs:ColumnSeries = new ColumnSeries();
				cs.xField = "quarter";
 	 			cs.yField = yField;
				cs.displayName = yField;
				cs.setStyle("showDataEffect", interpolate);
				columnSeries.push(cs);
			}
			
			protected function removeSeries(yField:String):void
			{
				for (var i:int; i<columnSeries.length; i++)
				{
					if (columnSeries[i].yField == yField)
					{
						columnSeries.splice(i, 1);
						break;
					}
				}
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				createSeries("Alpha");
				createSeries("Beta");
				createSeries("Gamma");
				breakdown.series = columnSeries;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:NumberFormatter id="nf"/>
		<mx:SeriesInterpolate id="interpolate"/>
		<s:RadioButtonGroup id="labelPositionGroup"/>
		<s:RadioButtonGroup id="stackGroup" change="stackGroup_changeHandler(event)"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="portrait"/>
		<s:State name="landscape"/>
	</s:states>

	<s:Group
		top="20" left="20" right="20" bottom="{height/2 + 10}"
		bottom.landscape="20" right.landscape="{width/2 + 10}">
		<s:Label text="Revenue by Geo" styleName="title"/>
		<mx:PieChart id="pcRegion" dataProvider="{results}" fontSize="16"
					 top="0" left="0" right="0" bottom="30"
					 showDataTips="true" dataTipFunction="dataTipPie"
					 itemClick="pcRegion_itemClickHandler(event)">
			
			<mx:series>
				<mx:PieSeries id="pieSeries" field="total" nameField="region" 
							  labelPosition="{labelPositionGroup.selectedValue}"
							  labelFunction="getSliceLabel"/>
			</mx:series>
		</mx:PieChart>
		
		<s:HGroup horizontalCenter="0" bottom="0">
			<s:RadioButton label="inside" group="{labelPositionGroup}" selected="true"/>
			<s:RadioButton label="outside" group="{labelPositionGroup}"/>
			<s:RadioButton label="callout" group="{labelPositionGroup}"/>
		</s:HGroup>
		
	</s:Group>

	
	<s:Group
		top="{height/2 + 10}" bottom="20" left="20" right="20"
		top.landscape="20" left.landscape="{width/2 + 10}">
		<s:Label id="title2" text="Product Breakdown" styleName="title"/>
		<mx:ColumnChart id="breakdown" fontSize="16"
						bottom="110" left="0" right="0" top="30"
						width.landscape="{(width-60)/2}" height.landscape="{undefined}" left.landscape="{undefined}"
						showDataTips="true" dataTipFunction="dataTipColumn">
			
			<mx:horizontalAxis>
				<mx:CategoryAxis categoryField="quarter"/>
			</mx:horizontalAxis>
			
			<mx:verticalAxis>
				<mx:LinearAxis id="vAxis" minimum="0" maximum="400"/>
			</mx:verticalAxis>

		</mx:ColumnChart>

		<mx:Legend  horizontalCenter="16" bottom="80"
				   dataProvider="{breakdown}"
				   direction="horizontal">
			
		</mx:Legend>
		
		<s:HGroup horizontalCenter="16" bottom="44" gap="20">
			<s:CheckBox id="cbAlpha" label="Alpha" selected="true" change="cb_changeHandler(event)"/>
			<s:CheckBox id="cbBeta" label="Beta" selected="true" change="cb_changeHandler(event)"/>
			<s:CheckBox id="cbGamma" label="Gamma" selected="true" change="cb_changeHandler(event)"/>
		</s:HGroup>

		<s:HGroup horizontalCenter="16" bottom="0">
			<s:RadioButton label="clustered" group="{stackGroup}" selected="true"/>
			<s:RadioButton label="stacked" group="{stackGroup}"/>
			<s:RadioButton label="100%" group="{stackGroup}"/>
		</s:HGroup>

	</s:Group>
</s:View>
